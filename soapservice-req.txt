package com.example.soapclient;

import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import java.io.File;
import java.io.IOException;
import java.io.StringWriter;

@Service
public class SoapService {

    public Envelope unmarshalSoapMessage() {
        try {
            // Load the XML file from the resources folder
            File file = new ClassPathResource("soapMessage.xml").getFile();

            // Create a JAXB context for the Envelope class
            JAXBContext jaxbContext = JAXBContext.newInstance(Envelope.class);

            // Create an unmarshaller
            Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();

            // Unmarshal the XML file to an Envelope object
            return (Envelope) unmarshaller.unmarshal(file);

        } catch (JAXBException | IOException e) {
            e.printStackTrace();
            throw new RuntimeException("Failed to unmarshal SOAP message", e);
        }
    }

    public String marshalSoapMessage(Envelope envelope) {
        try {
            // Create a JAXB context for the Envelope class
            JAXBContext jaxbContext = JAXBContext.newInstance(Envelope.class);

            // Create a marshaller
            Marshaller marshaller = jaxbContext.createMarshaller();
            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);

            // Marshal the Envelope object to a string
            StringWriter stringWriter = new StringWriter();
            marshaller.marshal(envelope, stringWriter);

            return stringWriter.toString();

        } catch (JAXBException e) {
            e.printStackTrace();
            throw new RuntimeException("Failed to marshal SOAP message", e);
        }
    }

    public Envelope modifyEnvelope(Envelope envelope, String jobName, String repoName, String jobServerName) {
        if (envelope != null && envelope.getBody() != null && envelope.getBody().getRunBatchJobRequest() != null) {
            RunBatchJobRequest request = envelope.getBody().getRunBatchJobRequest();
            request.setJobName(jobName);
            request.setRepoName(repoName);
            request.setJobServerName(jobServerName);
        }
        return envelope;
    }
}
