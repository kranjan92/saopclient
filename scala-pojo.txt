libraryDependencies ++= Seq(
  "io.circe" %% "circe-core" % "0.14.5",
  "io.circe" %% "circe-generic" % "0.14.5",
  "io.circe" %% "circe-parser" % "0.14.5",
  "org.apache.spark" %% "spark-sql" % "3.4.1"
)


import org.apache.spark.sql.SparkSession
import io.circe._
import io.circe.parser._
import io.circe.generic.semiauto._
import org.apache.spark.sql.Encoder
import org.apache.spark.sql.Encoders

// Step 1: Define the case classes with default values
case class Address(street: String = "", city: String = "", postalCode: String = "")
case class Contact(`type`: String = "", detail: String = "")
case class Person(name: String = "", age: Int = 0, address: Address = Address(), contacts: List[Contact] = List())

object CirceDecoders {
  // Step 2: Custom decoders to handle missing fields
  implicit val decodeAddress: Decoder[Address] = deriveDecoder[Address].emap { address =>
    Right(Address(
      street = Option(address.street).getOrElse(""),
      city = Option(address.city).getOrElse(""),
      postalCode = Option(address.postalCode).getOrElse("")
    ))
  }

  implicit val decodeContact: Decoder[Contact] = deriveDecoder[Contact].emap { contact =>
    Right(Contact(
      `type` = Option(contact.`type`).getOrElse(""),
      detail = Option(contact.detail).getOrElse("")
    ))
  }

  implicit val decodePerson: Decoder[Person] = deriveDecoder[Person].emap { person =>
    Right(Person(
      name = Option(person.name).getOrElse(""),
      age = Option(person.age).getOrElse(0),
      address = Option(person.address).getOrElse(Address()),
      contacts = Option(person.contacts).getOrElse(List())
    ))
  }
}

object SparkNestedPojoExample {
  def main(args: Array[String]): Unit = {
    // Step 3: Create Spark Session
    val spark = SparkSession.builder
      .appName("Spark Nested POJO Example with Circe")
      .master("local[*]")
      .getOrCreate()

    import spark.implicits._
    import CirceDecoders._

    // Step 4: Read and parse JSON data
    val jsonData = """[
      {
        "name": "John",
        "age": 30,
        "address": {
          "street": "123 Main St",
          "city": "Anytown",
          "postalCode": "12345"
        },
        "contacts": [
          {
            "type": "email",
            "detail": "john@example.com"
          },
          {
            "type": "phone",
            "detail": "123-456-7890"
          }
        ]
      },
      {
        "name": "Jane",
        "age": 25,
        "address": {
          "street": "456 Maple Ave",
          "city": "Othertown",
          "postalCode": "67890"
        },
        "contacts": [
          {
            "type": "email",
            "detail": "jane@example.com"
          },
          {
            "type": "phone",
            "detail": "987-654-3210"
          }
        ]
      },
      {
        "name": "Tom",
        "address": {
          "street": "",
          "city": "",
          "postalCode": ""
        },
        "contacts": []
      }
    ]"""

    val parsedData = decode[List[Person]](jsonData) match {
      case Right(data) => data
      case Left(error) => throw new Exception("Failed to parse JSON", error)
    }

    // Convert List[Person] to Dataset
    implicit val personEncoder: Encoder[Person] = Encoders.product[Person]
    val ds = spark.createDataset(parsedData)

    // Step 5: Map data to case class
    val transformedDS = ds.map(person => {
      person.copy(
        age = person.age + 1,
        address = person.address.copy(city = person.address.city + " USA"),
        contacts = person.contacts.map(contact => 
          if (contact.`type` == "email") 
            contact.copy(detail = contact.detail.toUpperCase) 
          else 
            contact
        )
      )
    })

    // Step 6: Perform actions
    transformedDS.show()
    val peopleList = transformedDS.collect().toList
    peopleList.foreach(println)

    // Stop the Spark session
    spark.stop()
  }
}



   
     
 
